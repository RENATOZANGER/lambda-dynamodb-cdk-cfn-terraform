AWSTemplateFormatVersion: '2010-09-09'
Description: DynamoDB and Lambda

Parameters:
  TableName:
    Type: String
    Default: ProductsTable
    Description: Table name DynamoDB

  BucketName:
    Type: String
    Default: "<bucket-name>"
    Description: Bucket Name

  FunctionName:
    Type: String
    Default: "Lambda_and_dynamodb"
    Description: Function Name

Resources:
  #Create table in dynamodb
  ProductsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  #Create the role to use in lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBReadWrite
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: !GetAtt ProductsTable.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  #Create Lambda
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref FunctionName
      Handler: lambda_function.lambda_handler
      Runtime: python3.12
      Code:
        S3Bucket: !Ref BucketName
        S3Key: lambda_function.zip
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName

  #Create an invocation URL for the Lambda
  LambdaFunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE
      TargetFunctionArn: !GetAtt LambdaFunction.Arn

  #Create a permission for the Lambda to be invoked through its URL.
  permissionForURLInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      FunctionUrlAuthType: 'NONE'
      Action: lambda:InvokeFunctionUrl
      Principal: '*'

#Display lambda public url in cloudformation output
Outputs:
  ProductListUrl:
    Description: URL to access the Lambda function
    Value: !GetAtt LambdaFunctionUrl.FunctionUrl